{
    "notes": "# Static Variable Allocation\n\n## Code Example\n```c\nint a;\nint b[10];\n\nvoid foo() {\n    a = 0;\n    b[a] = a;\n}\n```\n\n## Static Memory Layout\n- 0x1000: value of a\n- 0x2000: value of b[0]\n- 0x2004: value of b[1]\n- ...\n- 0x2024: value of b[9]\n\n## Allocation\n- Assigning a memory location (address) to a variable\n- **Questions:** When does this happen? How is the location found?\n\n## Static vs Dynamic Computation\n- Global/static variables:\n  - Exist before program starts\n  - Live until after program finishes\n- Compiler:\n  - Allocates variables with constant addresses\n  - No dynamic computation required for allocation\n  - Tracks free space during compilation\n  - Has complete control of program's memory\n\n**Note:** Static allocation allows for efficient memory management determined at compile-time."
}